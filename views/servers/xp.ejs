<% include ../partials/header %>

<% 
tooltip = (text) => `<i class="fas fa-question-circle text-primary" data-toggle="tooltip" data-placement="top" title="${text}"></i>`
getToggle = (value) => `<label class="checkbox-inline d-flex justify-content-end ${value ? " on" : ""}">
                            <input type="checkbox" data-toggle="toggle">
                        </label>`;
alphabetically = (a, b) =>
{
    if (a < b) return -1;
    else if (a > b) return 1;
    return 0;
}

getConfigValue = (value, config, name) =>
{
    let premium = config && config.IsPremium ? "disabled" : "";
    let getInput = (input) => config && config.Input && config.Input.Type != "Other" ? config.Input.Type : input;
    let repeated = (type) => `class="form-control float-left" name="${name}" type="${getInput(type)}" value="${value}" ${premium}`;

    switch (typeof(value)) 
    {
        case "boolean":
            return `<label class="checkbox-inline d-flex justify-content-end">
                        <input ${repeated('checkbox')}" data-toggle="toggle" ${value ? "checked" : ""}>
                    </label>`;
        case "number":
            return `<input ${repeated("number")}>`;
        case "object":
            if (Array(value)) return `<textarea class="form-control" name="${name}" ${premium}>${value}</textarea>`;
            return value;
        case "string":
            return value.length >= 32 ? `<textarea class="form-control" name="${name}" ${premium}>${value}</textarea>` : `<input ${repeated("text")}>`;
        case "undefined":
            return "Config undefined";
        default:
            return typeof(value);
    }
}
%>

<% include ../partials/guildSidebar %>

    <header id="guild-header" class="container jumbotron bg-transparent center-bg text-center uppercase">
        <h1 class="text-light"><%= socketGuild.name %></h1>
        <hr class="my-2">
        <p class="lead text-muted"><%= module %></p>
    </header>

    <section id="modules" class="container">
        <form action="/servers/<%= socketGuild.id %>?_method=PUT" method="POST">
            <!-- <input name="guild[<%= module %>][Enabled]" type="hidden" value="true"> -->
            <%
            
            let props = Object.keys(guild[module]);
            props.forEach(prop =>
            {
                if (prop === "Enabled") return;

                let modProp = guild[module][prop] || {};
                let modPropConfig = modules[module][prop] || {}; 

                let isSubmodule = typeof(modProp) == "object" && !modProp[0] || modProp == 0;
                if (isSubmodule)
                { 
                    let enabled = modProp.Enabled;
                    let enabledConfig = modules[module].Enabled.Config;
                    
                    %><div class="row border-top border-secondary mt-5 pt-3">
                        <div class="col-lg-12">
                            <h1 class="float-left"><% property.toSentenceCase() %></h1><%- getToggle(guild.XP.RoleRewards.Enabled); %>
                        </div><%

                        let subprops = Object.keys(modProp);
                        subprops.forEach(subprop =>
                        {
                            if (subprop === "Enabled") return;

                            let submodProp = modProp[subprop];
                            let submodPropConfig = modules[module][prop][subprop].Config;

                            %><div class="col-lg-4 text-light mt-3">
                                <label><%= property.toSentenceCase() %> <%- tooltip("<%= submodPropConfig.Description %>") %></label>
                                <%= getConfigValue(submodProp, submodPropConfig, `guild[${module}][${property}][${subprop}]`) %>
                            </div><%
                        }
                        %></div>
                <% 
                }
                else
                {
                    %>[OTHER]<%= prop %><%
                }
            }
            %> 

                <div class="col-lg-4 text-light mt-3">
                    <label>Message Length Threshold <%- tooltip("Minimum character length for a message to earn EXP") %></label>
                    <input class="form-control form-control-sm" name="guild[XP][MessageLengthThreshold]" type="number"> %>
                </div>
                <div class="col-lg-4 text-light mt-3">
                    <label>Cooldown <%- tooltip("Duration, in seconds, the user has to wait to earn EXP between messages") %></label>
                    <input class="form-control form-control-sm" name="guild[XP][Cooldown]" type="number"> %>
                </div>
                <div class="col-lg-4 text-light mt-3">
                    <label>Extended Cooldown <%- tooltip("The cooldown given to users after being muted") %></label>
                    <input class="form-control form-control-sm" name="guild[XP][ExtendedCooldown]" type="number"> %>
                </div>
                <div class="col-lg-4 text-light mt-3">
                    <label>Duplicate Message Threshold <%- tooltip("Delay, in seconds, when to allow messages with duplicate content") %></label>
                    <input class="form-control form-control-sm" name="guild[XP][DuplicateMessageThreshold]" type="number"> %>
                </div>
                <div class="col-lg-4 text-light mt-3">
                    <label>Max Leaderboard Page <%- tooltip("Delay, in seconds, when to allow messages with duplicate content") %></label>
                    <input class="form-control form-control-sm" name="guild[XP][MaxLeaderboardPage]" type="number"> %>
                </div>
            </div>
            
            <div class="row border-top border-secondary mt-5 pt-3">
                <div class="col-lg-12">
                    <h1 class="float-left">Role Rewards</h1><%- getToggle(guild.XP.RoleRewards.Enabled); %>
                </div>
                <div class="col-lg-12">
                    <p class="lead">Reward roles as EXP rewards</p>
                    <div class="border-bottom border-secondary">
                </div>
                <div class="col-lg-4">
                    <label>Stack Roles <%- tooltip("Duration, in seconds, the user has to wait to earn EXP between messages") %></label>
                    <%- getToggle(guild.XP.RoleRewards.StackRoles); %>
                </div>  
            </div>
        </form>
    </section>

    <style>
        #modules .row div
        {
            display: inline-block;
        }

        .col-lg-4 label
        {
            margin-left: 25px;
            float: left;
        }
    </style>


    <link href="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/css/bootstrap4-toggle.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>

    <script>
        var removeRole = (role) => 
        {
            // roles.splice(1, options.indexOf(role));
            alert("T");
        }
        // on any input change -> unsaved changes message
        $("input").on("change", () => setTimeout(() => 
        {
            confirm("Save changes?") && $('form').submit();
        }, 2500));
    </script>

<% include ../partials/footer %>